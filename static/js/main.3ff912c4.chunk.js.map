{"version":3,"sources":["serviceWorker.ts","components/PomdorTimer.tsx","App.tsx","theme.ts","components/Header.tsx","router.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","BtnState","constStyles","area","height","width","button","borderRadius","fontSize","PomodorTimer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","intervalId","setState","msTime","btnState","Standby","Notification","permission","requestPermission","result","ms","onFinished","_this2","setInterval","state","stopTimer","clearInterval","_this3","Active","startTimer","updateToRest","_this4","Stop","_this5","Rest","updateToStandby","tmp","Math","floor","ss","String","padStart","react_default","a","createElement","index_es","variant","style","onClick","updateToActive","bind","color","updateToStop","formatTime","continueActive","areaStyle","assign","React","Component","App","_Component","apply","arguments","inherits","createClass","key","value","PomdorTimer_PomodorTimer","margin","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","Header","position","flexGrow","href","d","AppRouter","core_styles","Header_Header","react_router_dom","basename","process","react_router","exact","path","component","ReactDOM","render","router_AppRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ff912c4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Button } from '@material-ui/core'\r\n\r\nenum BtnState {\r\n    Standby,\r\n    Active,\r\n    Stop,\r\n    Rest\r\n}\r\n\r\ninterface Props {\r\n    style?: object\r\n}\r\n\r\ninterface State {\r\n    msTime: number,\r\n    btnState: BtnState,\r\n}\r\n\r\nconst constStyles = {\r\n    area: {\r\n        height: '170px',\r\n        width: '170px',\r\n    },\r\n    button: {\r\n        height: '170px',\r\n        width: '170px',\r\n        borderRadius: '50%',\r\n        fontSize: '24px'\r\n    },\r\n}\r\n\r\nconst msRestTime: number = 300000\r\nconst msActiveTime: number = 1500000\r\n\r\nexport default class PomodorTimer extends React.Component<Props, State> {\r\n\r\n    private intervalId: NodeJS.Timeout | null = null\r\n\r\n    constructor(props: Props) {\r\n        super(props)\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState({\r\n            msTime: msActiveTime,\r\n            btnState: BtnState.Standby\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (Notification.permission === 'default') {\r\n            Notification.requestPermission(function (result) {\r\n                if (result === 'granted') {\r\n                    new Notification('通知を受け取れるようになりました！\\nよきpomntuライフを！')\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    private startTimer(ms: number, onFinished: () => void) {\r\n        this.setState({\r\n            msTime: ms\r\n        })\r\n        this.intervalId = setInterval(() => {\r\n            if (this.state.msTime == 0) {\r\n                this.stopTimer()\r\n                onFinished()\r\n                return\r\n            }\r\n            this.setState({\r\n                msTime: this.state.msTime - 1000\r\n            })\r\n        }, 1000)\r\n    }\r\n\r\n    private stopTimer() {\r\n        if (this.intervalId != null) {\r\n            clearInterval(this.intervalId)\r\n        }\r\n    }\r\n\r\n    private updateToStandby() {\r\n        this.stopTimer()\r\n        this.setState({\r\n            btnState: BtnState.Standby\r\n        })\r\n    }\r\n\r\n    private updateToActive() {\r\n        this.setState({\r\n            btnState: BtnState.Active\r\n        })\r\n        this.startTimer(msActiveTime, () => {\r\n            new Notification('Activeタイムが終了しました！\\n休憩をとってください。')\r\n            this.updateToRest()\r\n        })\r\n    }\r\n\r\n    private continueActive() {\r\n        this.setState({\r\n            btnState: BtnState.Active\r\n        })\r\n        this.startTimer(this.state.msTime, () => {\r\n            this.updateToRest()\r\n        })\r\n    }\r\n\r\n    private updateToStop() {\r\n        this.stopTimer()\r\n        this.setState({\r\n            btnState: BtnState.Stop\r\n        })\r\n    }\r\n\r\n    private updateToRest() {\r\n        this.setState({\r\n            btnState: BtnState.Rest\r\n        })\r\n        this.startTimer(msRestTime, () => {\r\n            new Notification('休憩時間が終了しました。\\nActiveを再開してください。')\r\n            this.updateToStandby()\r\n        })\r\n    }\r\n\r\n    private formatTime(ms: number): string {\r\n        const tmp = Math.floor(ms / 1000)\r\n        const ss = String(tmp % 60).padStart(2, '0')\r\n        const mm = String(Math.floor(tmp / 60) % 60).padStart(2, '0')\r\n        return mm + ':' + ss;\r\n    }\r\n\r\n    private button(): JSX.Element {\r\n        switch (this.state.btnState) {\r\n            case BtnState.Standby: return (\r\n                <Button variant=\"contained\" style={constStyles.button} onClick={this.updateToActive.bind(this)}>\r\n                    Start\r\n                </Button>\r\n            )\r\n            case BtnState.Active: return (\r\n                <Button color='primary' variant=\"contained\" style={constStyles.button} onClick={this.updateToStop.bind(this)}>\r\n                    {this.formatTime(this.state.msTime)}\r\n                </Button>\r\n            )\r\n            case BtnState.Stop: return (\r\n                <Button variant=\"contained\" style={constStyles.button} onClick={this.continueActive.bind(this)}>\r\n                    {this.formatTime(this.state.msTime)}\r\n                </Button>\r\n            )\r\n            case BtnState.Rest: return (\r\n                <Button color='secondary' variant=\"contained\" style={constStyles.button} onClick={this.updateToStandby.bind(this)}>\r\n                    {this.formatTime(this.state.msTime)}\r\n                </Button>\r\n            )\r\n            default: return <Button></Button>\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const areaStyle = Object.assign({},\r\n            constStyles.area,\r\n            this.props.style\r\n        )\r\n\r\n        return (\r\n            <div style={areaStyle}>\r\n                {this.button()}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport PomodorTimer from './components/PomdorTimer';\r\n\r\nconst styles = {\r\n    pomodorTimer: {\r\n        margin: 'auto'\r\n    }\r\n}\r\n\r\nexport class App extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <PomodorTimer style={{margin: '100px auto'}}></PomodorTimer>\r\n            </div>\r\n        )\r\n    }\r\n}","import {createMuiTheme} from '@material-ui/core/styles'\r\n        \r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      light: '#ffa4a2',\r\n      main: '#e57373',\r\n      dark: '#af4448',\r\n      contrastText: '#ffebee',\r\n    },\r\n    secondary: {\r\n      light: '#d7ffd9',\r\n      main: '#a5d6a7',\r\n      dark: '#75a478',\r\n      contrastText: '#000000',\r\n    },\r\n  },\r\n})","import React from \"react\";\r\nimport { AppBar, Toolbar, Typography, IconButton, SvgIcon } from \"@material-ui/core\";\r\n\r\nexport default class Header extends React.Component {\r\n    render(): JSX.Element {\r\n        return (\r\n            <AppBar position=\"static\">\r\n                <Toolbar variant=\"dense\">\r\n                    <Typography variant=\"h6\" color=\"inherit\" style={{ flexGrow: 1 }}>\r\n                        pomntu\r\n                    </Typography>\r\n                    <IconButton color='inherit' href='https://github.com/yasukotelin/pomntu'>\r\n                        <SvgIcon>\r\n                            <path d=\"M12 .3a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2c-3.3.7-4-1.6-4-1.6-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.5 1 0-.8.4-1.3.7-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.2-.4-.6-1.6 0-3.2 0 0 1-.3 3.4 1.2a11.5 11.5 0 0 1 6 0c2.3-1.5 3.3-1.2 3.3-1.2.6 1.6.2 2.8 0 3.2.9.8 1.3 1.9 1.3 3.2 0 4.6-2.8 5.6-5.5 5.9.5.4.9 1 .9 2.2v3.3c0 .3.1.7.8.6A12 12 0 0 0 12 .3\"></path>\r\n                        </SvgIcon>\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { BrowserRouter as Router, Route, BrowserRouter } from \"react-router-dom\";\r\nimport {App} from './App';\r\nimport {MuiThemeProvider} from '@material-ui/core/styles'\r\nimport {theme} from './theme'\r\nimport Header from './components/Header';\r\n\r\nexport class AppRouter extends Component {\r\n    render() {\r\n        return (\r\n            <MuiThemeProvider theme={theme} >\r\n                <Header></Header>\r\n                <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                    <Route exact path='/' component={App}></Route>\r\n                </BrowserRouter>\r\n            </MuiThemeProvider>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { AppRouter } from './router';\r\n\r\nReactDOM.render(<AppRouter />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}